#!/usr/bin/env bash

set -euo pipefail

# autoprat â€” batch-comment PRs with /lgtm, /approve, /ok-to-test,
# custom comments, or re-trigger commands for failed CI jobs (strips
# path prefixes for /test and /retest).

declare -A comment_label_map=(
    ["/lgtm"]="lgtm"
    ["/approve"]="approved"
    ["/ok-to-test"]="ok-to-test"
)

declare -a comments=()
declare -a jobs=()
declare -A pr_titles=()

all_prs=0
dry_run=0
show_titles=0
cmd_prefix="/test"    # default CI command prefix.
repo=""

usage() {
    cat <<EOF
Usage:
  ${0##*/} -r OWNER/REPO [OPTIONS] [PR-NUMBER]

Modes:
  Without -a: supply a single PR-NUMBER plus any of
    --lgtm, --approve, --ok-to-test, --comment, --job.
  With -a:    omit PR-NUMBER and apply to all open PRs.

Options:
  -r, --repo OWNER/REPO   GitHub repo (required)
  -a, --all               Apply to all open PRs
  --lgtm                  Add /lgtm (if no 'lgtm' label yet)
  --approve               Add /approve (if no 'approved' label yet)
  --ok-to-test            Add /ok-to-test (if no 'ok-to-test' label yet)
  -c, --comment TEXT      Custom comment (always posted)
  -j, --job JOB-NAME      If JOB-NAME failed, post
                          "$cmd_prefix <basename-of-JOB-NAME>"
                          (repeatable)
  -x, --cmd PREFIX        Prefix for job comments (default: /test)
  -n, --dry-run           Show what would be done without posting
  -t, --show-title        Display PR titles
  -h, --help              Show this help

Examples:
  # Single PR: lgtm + approve + ok-to-test.
  ${0##*/} -r OWNER/REPO --lgtm --approve --ok-to-test 123

  # Single PR: post /retest.
  ${0##*/} -r OWNER/REPO -c /retest 123

  # All PRs: re-test a specific job.
  ${0##*/} -r OWNER/REPO -a -j ci/prow/test-fmt

  # All PRs: re-test two jobs, plus a note, dry-run.
  ${0##*/} -r OWNER/REPO -a -n \\
     -j ci/prow/test-fmt \\
     -j ci/prow/security \\
     -x /retest \\
     -c "please re-run CI"

  # Dry-run only ok-to-test on all PRs.
  ${0##*/} -r OWNER/REPO -a -n --ok-to-test

  # Dry-run only lgtm+approve on all PRs.
  ${0##*/} -r OWNER/REPO -a -n --lgtm --approve
EOF
    exit 1
}

run() {
    echo "+ $*"
    [[ "$dry_run" -eq 0 ]] && "$@"
}

pr_has_failed_job() {
    local pr="$1" job="$2"
    gh pr checks "$pr" --repo "$repo" \
       --json name,state \
       --jq '.[] | select(.name == "'"$job"'" and .state == "FAILURE")' \
       >/dev/null
}

has_label() {
    local pr="$1" label="$2"
    gh pr view "$pr" --repo "$repo" \
       --json labels \
       --jq '.labels[] | select(.name == "'"$label"'")' \
       >/dev/null
}

post_jobs() {
    local pr="$1" did=0
    for job in "${jobs[@]}"; do
        if pr_has_failed_job "$pr" "$job"; then
            local arg
            if [[ "$cmd_prefix" == "/test" || "$cmd_prefix" == "/retest" ]]; then
                arg="${job##*/}"
            else
                arg="$job"
            fi
            echo "    retrigger: $cmd_prefix $arg"
            run gh pr comment "$pr" --repo "$repo" --body "$cmd_prefix $arg"
            did=1
        else
            echo "    no failure of '$job'; skipping"
        fi
    done
    (( did > 0 ))
}

post_labels_and_comments() {
    local pr="$1" did=0
    for comment in "${comments[@]}"; do
        local label="${comment_label_map[$comment]:-}"
        if [[ -n "$label" ]]; then
            if ! has_label "$pr" "$label"; then
                echo "    posting $comment"
                run gh pr comment "$pr" --repo "$repo" --body "$comment"
                did=1
            else
                echo "    already has '$label'; skipping $comment"
            fi
        else
            echo "    posting $comment"
            run gh pr comment "$pr" --repo "$repo" --body "$comment"
            did=1
        fi
    done
    (( did > 0 ))
}

ARGS=$(getopt -o r:c:anj:x:th \
              --long repo:,comment:,all,lgtm,approve,ok-to-test,job:,dry-run,cmd:,show-title,help \
              -- "$@")
eval set -- "$ARGS"

while true; do
    case "$1" in
        -r|--repo)       repo="$2";         shift 2 ;;
        -a|--all)        all_prs=1;         shift ;;
        --lgtm)          comments+=("/lgtm");       shift ;;
        --approve)       comments+=("/approve");    shift ;;
        --ok-to-test)    comments+=("/ok-to-test"); shift ;;
        -c|--comment)    comments+=("$2");          shift 2 ;;
        -j|--job)        jobs+=("$2");              shift 2 ;;
        -x|--cmd)        cmd_prefix="$2";           shift 2 ;;
        -n|--dry-run)    dry_run=1;                 shift ;;
        -t|--show-title) show_titles=1;             shift ;;
        -h|--help)       usage ;;
        --)              shift; break ;;
        *)               usage ;;
    esac
done

[[ -z "$repo" ]] && { echo "Error: --repo is required" >&2; exit 1; }

if [[ ${#comments[@]} -eq 0 && ${#jobs[@]} -eq 0 ]]; then
    echo "Error: specify at least one of --lgtm, --approve, --ok-to-test, --comment or --job" >&2
    exit 1
fi

if [[ "$all_prs" -eq 1 ]]; then
    [[ $# -ne 0 ]] && usage
else
    [[ $# -ne 1 ]] && usage
    pr_number="$1"
fi

if [[ "$all_prs" -eq 1 && "$show_titles" -eq 1 ]]; then
    while IFS=$'\t' read -r num title; do
        pr_titles["$num"]="$title"
    done < <(gh pr list --repo "$repo" --state open --json number,title \
                --jq '.[] | [.number, .title] | @tsv')
fi

if [[ "$all_prs" -eq 1 ]]; then
    pr_list=$(gh pr list --repo "$repo" --state open --json number --jq '.[].number')
else
    pr_list="$pr_number"
fi

while read -r pr; do
    [[ -z "$pr" ]] && continue
    if [[ "$show_titles" -eq 1 && -n "${pr_titles[$pr]:-}" ]]; then
        echo "==> PR #$pr: ${pr_titles[$pr]}"
    else
        echo "==> PR #$pr"
    fi

    did_any=0
    post_jobs "$pr"                && did_any=1
    post_labels_and_comments "$pr" && did_any=1

    [[ "$did_any" -eq 0 ]] && echo "    nothing to do"
done <<< "$pr_list"
